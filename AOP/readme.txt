理解和总结：
1、为什么需要AOP？
答：最初是 想要在 执行a函数时，每次去自动执行某个函数就好了。
    实际场景 就是 想要执行类中的每个方法时，都记录到日志中。而要是人工去写，这可要费大力气了，并且不好维护（难道每次更改都要去修改和一个一个的函数去替换，查看。有点lombok的味道了）。

2、如何使用AOP？
步骤1： 新建一个类（该类是要在执行a函数时，自动要执行的逻辑。即要植入的逻辑），这个类和普通的类不一样，需要告知spring，我是一个“切面”类。
        在该类中，开始编写 “切入点 @Pointcut” 即：指明 我要在那些函数、类、包下通通执行前要使用我的这个方法，其中包含了：
        @Before: 前置通知, 在方法执行之前执行
        @After: 后置通知, 在方法执行之后执行 。
        @AfterRunning: 返回通知, 在方法返回结果之后执行
        @AfterThrowing: 异常通知, 在方法抛出异常之后
        @Around: 环绕通知, 围绕着方法执行。
        
        切入点@Pointcut的匹配格式：（像正则表达式，匹配成功则执行我的这个方法，匹配不成功就不会去执行），所以匹配的写法至关重要的：
         execution：一般是匹配某个包下的 某些具备某些"特征"函数就算匹配成功了：如：   @Pointcut("execution(public * com.example.demo..*.*(..))") 匹配 修饰符为public 返回值为空的 且在com.example.demo下的任何函数
         within：  //within()函数定义的连接点是针对目标类而言的,里面的值可以是 自定义的注解类，也可以包名前缀 如：  @Pointcut("@within( com.example.demo.log.ControllerWebLogOfClass )")  ，其中，ControllerWebLogOfClass是自定义的注解类，表示只要这个自定义类添加到类名头上就会被”匹配成功“的注解
步骤2： 自定义注解。
        我们可以规定 该注解 是作用在“类”上，还是作用在“方法”上。@Target(ElementType.TYPE)可以控制，TYPE表示作用在类、接口上。METHON代表左右在方法上，还有许多值可以查
        
步骤3： 在使用的地方加上自定义的注解，（作用是标识，可以作为 切入点的一个判断条件）




注意事项：
1、要在类名前加：@Aspect        @Component
2、切入点切入方法的时候是可以传参的，切入类的时候能够传参数吗？好像不能
